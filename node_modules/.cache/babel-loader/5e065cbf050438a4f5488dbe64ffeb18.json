{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"C:\\\\Users\\\\manis\\\\academics\\\\sem3\\\\web\\\\mini-project\\\\twilight-updated-light\\\\src\\\\Components\\\\Comment-box\\\\index.js\";\n// src/components/Comment/index.js\nimport React from \"react\";\nimport \"./Comment-box.css\";\nimport Comments from \"../Comments\";\n\nclass CommentBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsx: [],\n      comment_text: \"\"\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick(e) {\n    fetch(\"/comments/upload\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: this.props.username,\n        useravatar: this.props.useravatar,\n        text: this.state.comment_text,\n        time: Date(Date.now()).toString(),\n        post_id: this.props.post_id\n      }),\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => console.log(\"Comment saved\"));\n    this.forceUpdate();\n  }\n\n  handleChange(e) {\n    this.setState({\n      comment_text: e.target.value\n    });\n  }\n\n  render() {\n    var comments = [];\n    var i = 0;\n    fetch(\"/comments\" + \"/\" + this.props.post_id, {\n      method: \"GET\"\n    }).then(comments => comments.json()).then(comments => {\n      var comment_jsx = [];\n\n      for (i = 0; i < comments.length; i++) {\n        comment_jsx.push( /*#__PURE__*/_jsxDEV(Comments, {\n          post_id: comments[i].post_id,\n          username: comments[i].username,\n          useravatar: comments[i].useravatar,\n          text: comments[i].text,\n          time: comments[i].time\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this));\n      }\n\n      this.setState({\n        jsx: comment_jsx\n      });\n    });\n\n    if (this.state.jsx.length === 0) {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Comments:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), \"No comments yet.\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: this.handleChange,\n          value: this.state.comment_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleClick,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Comments:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, this), this.state.jsx, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: this.handleChange,\n          value: this.state.comment_text\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          class: \"btn btn-primary btn-sm\",\n          onClick: this.handleClick,\n          children: \"Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this);\n    }\n  }\n\n}\n\nexport default CommentBox;","map":{"version":3,"sources":["C:/Users/manis/academics/sem3/web/mini-project/twilight-updated-light/src/Components/Comment-box/index.js"],"names":["React","Comments","CommentBox","Component","constructor","props","state","jsx","comment_text","handleClick","bind","handleChange","e","fetch","method","body","JSON","stringify","username","useravatar","text","time","Date","now","toString","post_id","headers","then","res","console","log","forceUpdate","setState","target","value","render","comments","i","json","comment_jsx","length","push"],"mappings":"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","sourcesContent":["// src/components/Comment/index.js\nimport React from \"react\";\nimport \"./Comment-box.css\";\nimport Comments from \"../Comments\";\n\nclass CommentBox extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      jsx: [],\n      comment_text: \"\",\n    };\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick(e) {\n    fetch(\"/comments/upload\", {\n      method: \"POST\",\n      body: JSON.stringify({\n        username: this.props.username,\n        useravatar: this.props.useravatar,\n        text: this.state.comment_text,\n        time: Date(Date.now()).toString(),\n        post_id: this.props.post_id,\n      }),\n      headers: { \"Content-Type\": \"application/json\" },\n    }).then((res) => console.log(\"Comment saved\"));\n\n    this.forceUpdate();\n  }\n\n  handleChange(e) {\n    this.setState({ comment_text: e.target.value });\n  }\n\n  render() {\n    var comments = [];\n    var i = 0;\n    fetch(\"/comments\" + \"/\" + this.props.post_id, {\n      method: \"GET\",\n    })\n      .then((comments) => comments.json())\n      .then((comments) => {\n        var comment_jsx = [];\n        for (i = 0; i < comments.length; i++) {\n          comment_jsx.push(\n            <Comments\n              post_id={comments[i].post_id}\n              username={comments[i].username}\n              useravatar={comments[i].useravatar}\n              text={comments[i].text}\n              time={comments[i].time}\n            />\n          );\n        }\n        this.setState({ jsx: comment_jsx });\n      });\n\n    if (this.state.jsx.length === 0) {\n      return (\n        <div>\n          <h3>Comments:</h3>\n          <br />\n          No comments yet.\n          <br />\n          <textarea\n            onChange={this.handleChange}\n            value={this.state.comment_text}\n          ></textarea>\n          <br />\n          <button onClick={this.handleClick}>Comment</button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h3>Comments:</h3>\n          <br />\n          {this.state.jsx}\n          <br />\n          <textarea\n            onChange={this.handleChange}\n            value={this.state.comment_text}\n          ></textarea>\n          <br />\n          <button class=\"btn btn-primary btn-sm\" onClick={this.handleClick}>Comment</button>\n          <br />\n        </div>\n      );\n    }\n  }\n}\nexport default CommentBox;\n"]},"metadata":{},"sourceType":"module"}